 # telegram_document_bot.py ‚Äî Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
# -----------------------------------------------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Intesa Sanpaolo:
#   /contratto ‚Äî –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä
#   /garanzia  ‚Äî –ø–∏—Å—å–º–æ –æ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–º –≤–∑–Ω–æ—Å–µ
#   /carta     ‚Äî –ø–∏—Å—å–º–æ –æ –≤—ã–ø—É—Å–∫–µ –∫–∞—Ä—Ç—ã
# -----------------------------------------------------------------------------
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pdf_costructor.py API
# -----------------------------------------------------------------------------
import logging
import os
from io import BytesIO

from telegram import Update, InputFile, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, ConversationHandler, MessageHandler, ContextTypes, filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ PDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
from pdf_costructor import (
    generate_contratto_pdf,
    monthly_payment,
)


# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ------------------------------------------
TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
DEFAULT_TAN = 7.86
DEFAULT_TAEG = 8.30


logging.basicConfig(format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –°–æ—Å—Ç–æ—è–Ω–∏—è Conversation -------------------------------
ASK_NAME, ASK_AMOUNT = range(2)

# ---------------------- PDF-—Å—Ç—Ä–æ–∏—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ API -------------------------
def build_contratto(data: dict) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–æ–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ API pdf_costructor"""
    return generate_contratto_pdf(data)


# ------------------------- Handlers -----------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "Benvenuto! Inserisci nome e cognome del cliente:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    context.user_data['name'] = name
    await update.message.reply_text("Inserisci importo (‚Ç¨):")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amt = float(update.message.text.replace('‚Ç¨','').replace(',','.').replace(' ',''))
    except:
        await update.message.reply_text("Importo non valido, riprova:")
        return ASK_AMOUNT
    context.user_data['amount'] = round(amt, 2)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    context.user_data['duration'] = 36  # 36 –º–µ—Å—è—Ü–µ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    context.user_data['tan'] = DEFAULT_TAN
    context.user_data['taeg'] = DEFAULT_TAEG
    context.user_data['payment'] = monthly_payment(amt, 36, DEFAULT_TAN)
    
    # –°—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    try:
        pdf_buffer = build_contratto(context.user_data)
        filename = f"Contrato_{context.user_data['name'].replace(' ', '_')}.pdf"
        await update.message.reply_document(
            document=InputFile(pdf_buffer, filename=filename)
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ask_duration, ask_tan, ask_taeg

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Operazione annullata.")
    return await start(update, context)

# ---------------------------- Main -------------------------------------------
def main():
    app = Application.builder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_amount)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)],
    )
    app.add_handler(conv)
    
    print("ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è: contratto")
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ pdf_costructor.py")
    
    app.run_polling()

if __name__ == '__main__':
    main()
